name: Release AppImage

on:
  push:
    tags:
      - 'v*'  # Trigger on any tag starting with 'v'
  workflow_dispatch:  # Manual triggers

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y imagemagick-6.q16 appstream fuse libfuse2 \
          build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev \
          libreadline-dev libffi-dev libsqlite3-dev libbz2-dev
        sudo sed -i 's/rights="none" pattern="PDF"/rights="read|write" pattern="PDF"/' /etc/ImageMagick-6/policy.xml
        sudo ln -s /usr/bin/convert /usr/local/bin/magick
        sudo modprobe fuse
        sudo chmod 666 /dev/fuse
        sudo chown root:$USER /dev/fuse

    - name: Get version from tag or file
      id: get_version
      run: |
        FILE_VERSION=$(grep -oP 'VERSION = "\K[^"]+' src/version.py)
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          if [ "$VERSION" != "$FILE_VERSION" ]; then
            echo "Error: Tag version ($VERSION) does not match version.py ($FILE_VERSION)"
            exit 1
          fi
        else
          VERSION=$FILE_VERSION
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Bundle dependencies in AppImage
      run: |
        chmod +x build/create-appimage.sh
        # Show initial Python state
        echo "::notice::System Python: $(which python3) ($(python3 --version))"
        
        # Start Python compilation
        echo "::notice::Starting Python 3.11.8 compilation"
        cd build
        if [ ! -f "Python-3.11.8.tgz" ]; then
          wget "https://www.python.org/ftp/python/3.11.8/Python-3.11.8.tgz" || echo "::error::Failed to download Python source"
        fi
        
        if [ ! -d "Python-3.11.8" ]; then
          tar xzf "Python-3.11.8.tgz" || echo "::error::Failed to extract Python source"
        fi
        
        cd Python-3.11.8
        echo "::notice::Configuring Python build"
        ./configure --prefix="$PWD/../AppDir/usr" --enable-shared || echo "::error::Python configure failed"
        
        echo "::notice::Building Python"
        make -j$(nproc) || echo "::error::Python build failed"
        
        echo "::notice::Installing Python"
        make install || echo "::error::Python install failed"
        cd ..
        
        if [ -f "AppDir/usr/bin/python3" ]; then
          echo "::notice::Compiled Python: $(./AppDir/usr/bin/python3 --version)"
        else
          echo "::error::Python compilation completed but binary not found at expected location"
        fi
        
        # Continue with the rest of the build
        ./create-appimage.sh
        appstreamcli validate AppDir/usr/share/metainfo/io.github.sodomak.vcam-bg.metainfo.xml

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      if: ${{ github.event_name == 'push' }}
      with:
        name: Release ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        files: |
          vcam-bg-x86_64.AppImage
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Artifact
      if: ${{ github.event_name == 'workflow_dispatch' }}
      uses: actions/upload-artifact@v4
      with:
        name: vcam-bg-x86_64
        path: vcam-bg-x86_64.AppImage
